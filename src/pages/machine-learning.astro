---
import LayoutSidebar from "@layouts/LayoutSidebar.astro";
---

<LayoutSidebar>
  <div
    class="min-h-screen m-3 flex flex-col items-center justify-center pb-[12vh] text-white"
  >
    <h1 class="text-4xl font-bold mb-4">Machine Learning</h1>
    <h2 class="text-2xl mb-6">TensorFlow.js Example</h2>
    <input
      type="file"
      id="file-upload"
      accept="image/*"
      class="mb-4 p-2 border border-gray-300 rounded-md"
    />
    <img
      id="img"
      class="max-w-full h-auto rounded-md shadow-lg"
      style="display:none;"
    />
  </div>

  <script>
    import * as tf from "@tensorflow/tfjs";
    import * as mobilenet from "@tensorflow-models/mobilenet";
    const img = document.getElementById("img") as HTMLImageElement | null;
    const fileUploadElement = document.getElementById("file-upload");
    if (fileUploadElement) {
      fileUploadElement.addEventListener("change", (event) => {
        const target = event.target as HTMLInputElement;
        if (target && target.files) {
          const file = target.files[0];
          const reader = new FileReader();
          reader.readAsDataURL(file);

          reader.onload = (e) => {
            if (img instanceof HTMLImageElement) {
              if (e.target) {
                img.src = (e.target as FileReader).result as string;
              }
              img.style.display = "block";

              // Load the model.
              mobilenet.load().then((model) => {
                // Classify the image.
                model.classify(img).then((predictions) => {
                  console.log("Predictions: ");
                  console.log(predictions);
                  const predictionsContainer = document.createElement("div");
                  predictionsContainer.className =
                    "mt-4 p-4 border border-gray-300 rounded-md bg-white text-black";
                  predictions.forEach((prediction) => {
                    const predictionElement = document.createElement("p");
                    predictionElement.textContent = `${prediction.className}: ${prediction.probability.toFixed(2)}`;
                    predictionsContainer.appendChild(predictionElement);
                  });
                  img.parentNode?.appendChild(predictionsContainer);
                });
              });
            } else {
              console.error(
                "Image element not found or is not an HTMLImageElement",
              );
            }
          };
        }
      });
    }
  </script>
</LayoutSidebar>
